"use client"

import type React from "react"

import { useState, useEffect, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Avatar } from "@/components/ui/avatar"
import { ScrollArea } from "@/components/ui/scroll-area"
import { MessageCircle, Send, X, Minimize2, Maximize2 } from "lucide-react"
import { cn } from "@/lib/utils"

// Define message type
type Message = {
  id: string
  content: string
  sender: "user" | "bot"
  timestamp: Date
}

export default function FloatingChatbot() {
  const [isOpen, setIsOpen] = useState(false)
  const [isMinimized, setIsMinimized] = useState(false)
  const [input, setInput] = useState("")
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "welcome",
      content:
        "ðŸ‘‹ Hi there! I'm Zanda, your Carbon Link assistant powered by ChatGPT. I'm specialized in carbon markets and carbon credits. How can I help you today?",
      sender: "bot",
      timestamp: new Date(),
    },
  ])
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)
  const chatbotRef = useRef<HTMLDivElement>(null)

  // Check if screen is mobile
  const [isMobile, setIsMobile] = useState(false)
  const [isTablet, setIsTablet] = useState(false)

  useEffect(() => {
    const checkScreenSize = () => {
      const width = window.innerWidth
      setIsMobile(width < 768)
      setIsTablet(width >= 768 && width < 1024)
    }

    checkScreenSize()
    window.addEventListener("resize", checkScreenSize)
    return () => window.removeEventListener("resize", checkScreenSize)
  }, [])

  // Handle clicks outside the chatbot to close it on mobile
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        chatbotRef.current &&
        !chatbotRef.current.contains(event.target as Node) &&
        isMobile &&
        isOpen &&
        !isMinimized
      ) {
        setIsOpen(false)
      }
    }

    document.addEventListener("mousedown", handleClickOutside)
    return () => document.removeEventListener("mousedown", handleClickOutside)
  }, [isOpen, isMobile, isMinimized])

  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  // Focus input when chat opens
  useEffect(() => {
    if (isOpen && !isMinimized) {
      setTimeout(() => {
        inputRef.current?.focus()
      }, 100)
    }
  }, [isOpen, isMinimized])

  const toggleChat = () => {
    setIsOpen(!isOpen)
    if (isMinimized) setIsMinimized(false)
  }

  const toggleMinimize = () => {
    setIsMinimized(!isMinimized)
  }

  const handleSend = () => {
    if (!input.trim()) return

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      content: input,
      sender: "user",
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInput("")
    setIsTyping(true)

    // Simulate bot response
    setTimeout(
      () => {
        const botResponse = getBotResponse(input.trim().toLowerCase())
        const botMessage: Message = {
          id: (Date.now() + 1).toString(),
          content: botResponse,
          sender: "bot",
          timestamp: new Date(),
        }

        setMessages((prev) => [...prev, botMessage])
        setIsTyping(false)
      },
      1000 + Math.random() * 1000,
    ) // Random delay between 1-2 seconds
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSend()
    }
  }

  // Get bot response based on user input
  const getBotResponse = (input: string): string => {
    // Carbon market and credit specific responses
    if (input.includes("carbon credit") || input.includes("carbon credits")) {
      return "Carbon credits are tradable certificates representing the reduction of one metric ton of carbon dioxide or equivalent greenhouse gases. They're generated by projects that reduce emissions and can be purchased by individuals or organizations to offset their carbon footprint."
    }

    if (input.includes("carbon market") || input.includes("carbon markets")) {
      return "Carbon markets are trading systems where carbon credits can be bought and sold. They include compliance markets (regulated by governments) and voluntary markets (where companies and individuals voluntarily offset emissions). These markets create financial incentives for emission reductions."
    }

    if (input.includes("offset project") || input.includes("carbon project")) {
      return "Carbon offset projects reduce, remove, or avoid greenhouse gas emissions. Common types include forestry & conservation, renewable energy, methane capture, and energy efficiency projects. Each project type has different benefits, costs, and verification requirements."
    }

    if (input.includes("verification") || input.includes("verify")) {
      return "Verification is the process of confirming that carbon offset projects deliver their claimed emission reductions. Independent third-party verifiers assess projects against standards like Verra, Gold Standard, or American Carbon Registry to ensure credibility and prevent double-counting."
    }

    if (input.includes("price") || input.includes("cost")) {
      return "Carbon credit prices vary widely based on project type, location, co-benefits, verification standard, and market demand. Prices typically range from $5-50+ per ton of CO2e. Premium credits with additional social or environmental benefits command higher prices."
    }

    if (input.includes("net zero") || input.includes("carbon neutral")) {
      return "Net zero means balancing the amount of greenhouse gases produced with the amount removed from the atmosphere. Organizations achieve this through a combination of emission reductions and purchasing carbon offsets. A robust net-zero strategy prioritizes direct emissions reductions first."
    }

    if (input.includes("zanda")) {
      return "I'm Zanda, your Carbon Link assistant powered by ChatGPT and specialized in carbon markets and carbon credits. I can help answer questions about offset projects, verification, pricing, and sustainability strategies. How else can I assist you today?"
    }

    // Default responses
    const defaultResponses = [
      "I'd be happy to help with your carbon market questions. Could you provide more details about what you'd like to know?",
      "That's an interesting question about carbon markets. Let me know if you'd like more specific information about carbon credits, offset projects, or verification.",
      "I'm here to help with all your carbon credit questions. Feel free to ask about specific project types, verification standards, or market trends.",
      "Thanks for your question. For more detailed information about carbon markets and credits, you might want to check out our resources section or schedule a consultation with one of our experts.",
    ]

    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)]
  }

  // Dynamic sizing based on screen size
  const getChatDimensions = () => {
    if (isMobile) {
      return isMinimized ? "h-14 w-72" : "w-[95vw] h-[85vh] max-w-sm max-h-[600px]"
    } else if (isTablet) {
      return isMinimized ? "h-14 w-80" : "h-[500px] w-[400px]"
    } else {
      return isMinimized ? "h-14 w-80" : "h-[500px] w-[380px]"
    }
  }

  const getChatPosition = () => {
    if (isMobile && isOpen && !isMinimized) {
      return "inset-4 flex items-center justify-center"
    }
    return "bottom-4 right-4 sm:bottom-6 sm:right-6"
  }

  return (
    <>
      {/* Chat button with label */}
      {!isOpen && (
        <div className="fixed bottom-4 right-4 sm:bottom-6 sm:right-6 z-50 flex flex-col items-center">
          <div className="bg-white dark:bg-gray-800 text-green-600 font-bold px-2 py-1 sm:px-3 sm:py-1 rounded-full shadow-md mb-2 text-xs sm:text-sm">
            Ask Zanda
          </div>
          <Button
            onClick={toggleChat}
            className="rounded-full h-12 w-12 sm:h-14 sm:w-14 p-0 shadow-lg bg-green-600 hover:bg-green-700"
          >
            <MessageCircle className="h-5 w-5 sm:h-6 sm:w-6" />
          </Button>
        </div>
      )}

      {/* Chat window */}
      {isOpen && (
        <div ref={chatbotRef} className={cn("fixed z-50 transition-all duration-300 ease-in-out", getChatPosition())}>
          {/* Mobile backdrop */}
          {isMobile && !isMinimized && (
            <div
              className="fixed inset-0 bg-black/50 transition-opacity duration-300 -z-10"
              onClick={() => setIsOpen(false)}
            />
          )}

          <Card className={cn("transition-all duration-300 ease-in-out shadow-xl z-10", getChatDimensions())}>
            {/* Chat header */}
            <CardHeader className="p-2 sm:p-3 flex flex-row items-center justify-between bg-green-600 text-white rounded-t-lg">
              {isMinimized ? (
                <CardTitle className="text-xs sm:text-sm flex items-center">
                  <MessageCircle className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2" />
                  Zanda - Carbon Assistant
                </CardTitle>
              ) : (
                <CardTitle className="text-sm sm:text-md flex items-center">
                  <Avatar className="h-6 w-6 sm:h-8 sm:w-8 mr-1 sm:mr-2 bg-white text-green-600">
                    <span className="font-semibold text-xs sm:text-sm">Z</span>
                  </Avatar>
                  <span className="hidden sm:inline">Zanda - Carbon Assistant</span>
                  <span className="sm:hidden">Zanda</span>
                </CardTitle>
              )}
              <div className="flex items-center space-x-1">
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-6 w-6 sm:h-7 sm:w-7 text-white hover:bg-green-700 rounded-full"
                  onClick={toggleMinimize}
                >
                  {isMinimized ? (
                    <Maximize2 className="h-3 w-3 sm:h-4 sm:w-4" />
                  ) : (
                    <Minimize2 className="h-3 w-3 sm:h-4 sm:w-4" />
                  )}
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-6 w-6 sm:h-7 sm:w-7 text-white hover:bg-green-700 rounded-full"
                  onClick={toggleChat}
                >
                  <X className="h-3 w-3 sm:h-4 sm:w-4" />
                </Button>
              </div>
            </CardHeader>

            {!isMinimized && (
              <>
                {/* Chat messages */}
                <CardContent className="p-0 h-[calc(100%-90px)] sm:h-[calc(100%-110px)]">
                  <ScrollArea className="h-full p-2 sm:p-4">
                    <div className="space-y-2 sm:space-y-4">
                      {messages.map((message) => (
                        <div
                          key={message.id}
                          className={cn("flex", message.sender === "user" ? "justify-end" : "justify-start")}
                        >
                          <div
                            className={cn(
                              "max-w-[85%] sm:max-w-[80%] rounded-lg p-2 sm:p-3",
                              message.sender === "user" ? "bg-green-600 text-white" : "bg-gray-100 dark:bg-gray-800",
                            )}
                          >
                            <p className="text-xs sm:text-sm break-words">{message.content}</p>
                          </div>
                        </div>
                      ))}
                      {isTyping && (
                        <div className="flex justify-start">
                          <div className="max-w-[85%] sm:max-w-[80%] rounded-lg p-2 sm:p-3 bg-gray-100 dark:bg-gray-800">
                            <div className="flex space-x-1">
                              <div
                                className="h-1.5 w-1.5 sm:h-2 sm:w-2 rounded-full bg-gray-400 animate-bounce"
                                style={{ animationDelay: "0ms" }}
                              ></div>
                              <div
                                className="h-1.5 w-1.5 sm:h-2 sm:w-2 rounded-full bg-gray-400 animate-bounce"
                                style={{ animationDelay: "150ms" }}
                              ></div>
                              <div
                                className="h-1.5 w-1.5 sm:h-2 sm:w-2 rounded-full bg-gray-400 animate-bounce"
                                style={{ animationDelay: "300ms" }}
                              ></div>
                            </div>
                          </div>
                        </div>
                      )}
                      <div ref={messagesEndRef} />
                    </div>
                  </ScrollArea>
                </CardContent>

                {/* Chat input */}
                <CardFooter className="p-2 sm:p-3 border-t">
                  <div className="flex w-full items-center space-x-1 sm:space-x-2">
                    <Input
                      ref={inputRef}
                      value={input}
                      onChange={(e) => setInput(e.target.value)}
                      onKeyDown={handleKeyDown}
                      placeholder="Ask about carbon markets..."
                      className="flex-1 text-xs sm:text-sm h-8 sm:h-10"
                    />
                    <Button
                      size="icon"
                      onClick={handleSend}
                      disabled={!input.trim()}
                      className="bg-green-600 hover:bg-green-700 text-white h-8 w-8 sm:h-10 sm:w-10"
                    >
                      <Send className="h-3 w-3 sm:h-4 sm:w-4" />
                    </Button>
                  </div>
                </CardFooter>
              </>
            )}
          </Card>
        </div>
      )}
    </>
  )
}
