"use client"

import { useState } from "react"
import Link from "next/link"
import Image from "next/image"
import { useParams, useRouter } from "next/navigation"
import { ArrowLeft, BookOpen, CheckCircle, X } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Progress } from "@/components/ui/progress"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"

export default function GuideDetailPage() {
  const params = useParams()
  const router = useRouter()
  const guideId = Number(params.id)
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [selectedAnswers, setSelectedAnswers] = useState<number[]>([])
  const [showResults, setShowResults] = useState(false)
  const [progress, setProgress] = useState(0)

  // This would normally come from an API call based on the ID
  const guides = [
    {
      id: 1,
      title: "Understanding Carbon Credits",
      description: "A comprehensive guide to carbon credits, how they work, and their role in fighting climate change.",
      type: "guide",
      level: "basic",
      image: "https://images.unsplash.com/photo-1569163139394-de4e4f43e4e5?w=800&h=600&fit=crop&crop=center",
      readTime: "10 min read",
      content: `
# Understanding Carbon Credits

Carbon credits are a key tool in the global effort to reduce greenhouse gas emissions and combat climate change. This guide will help you understand what carbon credits are, how they work, and their role in creating a more sustainable future.

## What Are Carbon Credits?

A carbon credit is a permit that represents the right to emit one ton of carbon dioxide (COâ‚‚) or the equivalent amount of other greenhouse gases. The idea behind carbon credits is simple: by putting a price on carbon emissions, we create a financial incentive for businesses and individuals to reduce their carbon footprint.

Carbon credits work on a cap-and-trade system. Regulatory bodies set a limit (cap) on the amount of greenhouse gases that can be emitted. Companies are issued permits for their emissions. If they emit less than their allocation, they can sell their excess permits (credits) to companies that exceed their limits.

## Types of Carbon Credits

There are two main types of carbon credits:

1. **Compliance Credits**: These are created by regulatory carbon reduction regimes, such as the European Union Emissions Trading System (EU ETS). Companies in regulated sectors must comply with emission caps and can trade credits to meet their obligations.

2. **Voluntary Credits**: These are purchased voluntarily by companies and individuals looking to offset their carbon footprint, often as part of corporate social responsibility initiatives or to achieve carbon neutrality claims.

## Carbon Offset Projects

Carbon credits are generated by projects that reduce, remove, or avoid greenhouse gas emissions. Common types include:

- **Forestry and Conservation**: Protecting existing forests or planting new ones to sequester carbon
- **Renewable Energy**: Building wind, solar, or hydroelectric power to replace fossil fuel energy
- **Methane Capture**: Capturing methane from landfills or agricultural operations
- **Energy Efficiency**: Implementing technologies that reduce energy consumption

## The Importance of Verification

For carbon credits to be credible, the emission reductions they represent must be real, additional (would not have happened without the project), and permanent. This is ensured through rigorous verification by third-party standards like Verra, Gold Standard, and others.

## The Role of Carbon Credits in Fighting Climate Change

Carbon credits play a crucial role in the transition to a low-carbon economy by:

1. Providing financial incentives for emission reductions
2. Directing capital toward sustainable projects
3. Allowing companies to take immediate action while developing long-term emission reduction strategies
4. Supporting projects with co-benefits like biodiversity conservation and community development

By understanding carbon credits, you can make more informed decisions about how to reduce your own carbon footprint and support effective climate action.
      `,
      assignment: {
        title: "Carbon Credit Basics Quiz",
        questions: [
          {
            question: "What is one carbon credit equivalent to?",
            options: ["1 kilogram of CO2", "1 ton of CO2", "1 pound of CO2", "1 metric ton of CO2 equivalent"],
            answer: 3,
          },
          {
            question: "Which of the following is NOT a common type of carbon offset project?",
            options: ["Reforestation", "Renewable energy", "Oil extraction", "Methane capture"],
            answer: 2,
          },
        ],
      },
    },
    {
      id: 2,
      title: "Carbon Credit Verification Standards",
      description:
        "Learn about the different verification standards and how they ensure the quality of carbon credits.",
      type: "guide",
      level: "advanced",
      image: "https://images.unsplash.com/photo-1454165804606-c3d57bc86b40?w=800&h=600&fit=crop&crop=center",
      readTime: "15 min read",
      content: `
# Carbon Credit Verification Standards

Verification standards are essential to ensuring the integrity, quality, and credibility of carbon credits. This guide explores the major standards, their methodologies, and how they help maintain trust in the carbon market.

## Why Verification Standards Matter

Carbon credits represent invisible emission reductions that can occur anywhere in the world. Without robust verification, it would be impossible to ensure that:

- Emission reductions are real and accurately measured
- Projects would not have happened without carbon finance (additionality)
- Carbon remains sequestered for the claimed period (permanence)
- Projects don't cause emissions to increase elsewhere (leakage)

## Major Verification Standards

### Verra's Verified Carbon Standard (VCS)

The largest standard in the voluntary carbon market, Verra has issued over 900 million carbon credits. VCS provides detailed methodologies for different project types and ensures rigorous third-party verification.

### Gold Standard

Founded by WWF and other NGOs, Gold Standard is known for emphasizing sustainable development co-benefits alongside carbon reductions. All Gold Standard projects must contribute to at least three UN Sustainable Development Goals.

### American Carbon Registry (ACR)

One of the first private voluntary greenhouse gas registries in the world, ACR focuses on innovation in carbon accounting and strong scientific foundations for its methodologies.

### Climate Action Reserve (CAR)

Based in North America, CAR develops standardized protocols for quantifying and monitoring emission reduction projects, with a focus on transparency and consistency.

### Plan Vivo

Specializing in community-led projects, Plan Vivo emphasizes sustainable livelihoods and ecosystem services alongside carbon benefits, making it ideal for smallholder and community-based projects.

## The Verification Process

1. **Project Design**: Developers create a detailed project description following the chosen standard's methodology
2. **Validation**: An independent third party validates the project design and emission reduction calculations
3. **Monitoring**: Project implementers collect data according to the approved monitoring plan
4. **Verification**: Independent verifiers confirm that emission reductions have occurred as claimed
5. **Issuance**: The standard issues carbon credits that can be sold on the market

## Comparing Standards

Standards differ in their:
- Geographic focus
- Eligible project types
- Methodological rigor
- Co-benefit requirements
- Cost structure
- Market recognition

When evaluating carbon credits, the verification standard used is one of the most important quality indicators. Understanding these standards helps buyers make informed decisions and supports the integrity of the carbon market.
      `,
      assignment: {
        title: "Verification Standards Assessment",
        questions: [
          {
            question: "Which verification standard is known for emphasizing sustainable development co-benefits?",
            options: ["Verra VCS", "Gold Standard", "American Carbon Registry", "Plan Vivo"],
            answer: 1,
          },
          {
            question: "What is 'additionality' in carbon credit verification?",
            options: [
              "Adding more carbon credits to a project",
              "The requirement that projects must generate emissions reductions that would not have occurred without carbon finance",
              "Additional benefits beyond carbon reduction",
              "Adding more verification standards to a project",
            ],
            answer: 1,
          },
        ],
      },
    },
    {
      id: 3,
      title: "How to Choose the Right Carbon Offset Projects",
      description:
        "Factors to consider when selecting carbon offset projects that align with your sustainability goals.",
      type: "guide",
      level: "basic",
      image: "https://images.unsplash.com/photo-1441974231531-c6227db76b6e?w=800&h=600&fit=crop&crop=center",
      readTime: "12 min read",
      content: `
# How to Choose the Right Carbon Offset Projects

With thousands of carbon offset projects available in the market, selecting the right ones for your sustainability goals can be challenging. This guide will help you navigate the selection process and make informed decisions.

## Key Factors to Consider

### 1. Project Type

Different project types offer different benefits and align with different sustainability goals:

- **Forestry & Conservation**: High biodiversity and community co-benefits, but may have permanence risks
- **Renewable Energy**: Drives clean energy transition, but additionality can be questionable in some markets
- **Methane Capture**: High climate impact due to methane's potency as a greenhouse gas
- **Energy Efficiency**: Often has strong social benefits but may yield fewer credits

Choose project types that align with your organization's mission and sustainability strategy.

### 2. Verification Standard

The standard used to verify a project is a critical quality indicator. Look for recognized standards like:
- Verra VCS
- Gold Standard
- American Carbon Registry
- Climate Action Reserve
- Plan Vivo

Each has different strengths and focuses, as covered in our Verification Standards guide.

### 3. Vintage

The "vintage" refers to the year the emission reductions occurred. Recent vintages (within the last 5 years) are generally preferred, though older vintages can still represent valid emission reductions.

### 4. Location

Project location matters for several reasons:
- Supporting projects in your operational regions can create stakeholder value
- Some regions have higher sustainable development needs
- Local projects may have storytelling advantages

### 5. Co-benefits

Many carbon projects deliver benefits beyond carbon reduction, such as:
- Biodiversity conservation
- Community economic development
- Water quality improvement
- Health benefits

Consider which co-benefits align with your sustainability goals and stakeholder priorities.

### 6. Price

Price varies widely based on project type, location, vintage, and quality. While higher prices often (but not always) indicate higher quality, the "right" price depends on your budget and priorities.

## Balancing Your Portfolio

Many organizations choose to invest in a portfolio of different project types and locations to balance risk, cost, and impact. A diversified approach might include:
- 40% forestry projects for high co-benefits
- 40% renewable energy for cost-effectiveness
- 20% innovative project types for leadership positioning

## Due Diligence Questions

When evaluating specific projects, ask:
1. Is the project additional? Would it have happened without carbon finance?
2. Are the emission reductions permanent?
3. Has the project been verified by a credible third party?
4. Are there documented co-benefits?
5. Is there transparency about how funds are used?

By carefully considering these factors, you can select carbon offset projects that not only reduce emissions effectively but also align with your broader sustainability goals and organizational values.
      `,
      assignment: {
        title: "Project Selection Exercise",
        questions: [
          {
            question: "Which factor is most important when evaluating the quality of a carbon offset project?",
            options: [
              "Location of the project",
              "Size of the project developer",
              "Verification by a recognized standard",
              "Age of the project",
            ],
            answer: 2,
          },
          {
            question: "What are co-benefits in carbon projects?",
            options: [
              "Financial benefits for investors",
              "Additional environmental and social benefits beyond carbon reduction",
              "Tax benefits for purchasing carbon credits",
              "Benefits shared between project developers",
            ],
            answer: 1,
          },
        ],
      },
    },
  ]

  const guide = guides.find((g) => g.id === guideId)

  if (!guide) {
    return <div>Guide not found</div>
  }

  const handleAnswerSelect = (questionIndex: number, answerIndex: number) => {
    const newAnswers = [...selectedAnswers]
    newAnswers[questionIndex] = answerIndex
    setSelectedAnswers(newAnswers)
  }

  const handleNextQuestion = () => {
    if (currentQuestion < guide.assignment.questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1)
    } else {
      setShowResults(true)
    }
    setProgress(((currentQuestion + 1) / guide.assignment.questions.length) * 100)
  }

  const calculateScore = () => {
    let correct = 0
    guide.assignment.questions.forEach((question, index) => {
      if (selectedAnswers[index] === question.answer) {
        correct++
      }
    })
    return {
      score: correct,
      total: guide.assignment.questions.length,
      percentage: Math.round((correct / guide.assignment.questions.length) * 100),
    }
  }

  return (
    <div className="flex-1 space-y-6 p-4 md:p-8 pt-6">
      <div className="flex items-center gap-2">
        <Button variant="outline" size="sm" onClick={() => router.back()}>
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back to Resources
        </Button>
        <Badge
          variant="outline"
          className={`${
            guide.level === "basic"
              ? "bg-blue-50 text-blue-700 border-blue-200"
              : "bg-purple-50 text-purple-700 border-purple-200"
          }`}
        >
          {guide.level.charAt(0).toUpperCase() + guide.level.slice(1)}
        </Badge>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          <div className="relative h-64 rounded-lg overflow-hidden">
            <Image
              src={guide.image || "/placeholder.svg"}
              alt={guide.title}
              fill
              className="object-cover"
              sizes="(max-width: 768px) 100vw, (max-width: 1200px) 66vw, 66vw"
            />
            <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent flex items-end">
              <div className="p-6">
                <Badge
                  variant="outline"
                  className="bg-blue-50 text-blue-700 border-blue-200 mb-2 flex items-center gap-1 w-fit"
                >
                  <BookOpen className="h-3 w-3" />
                  Guide
                </Badge>
                <h1 className="text-2xl md:text-3xl font-bold text-white">{guide.title}</h1>
                <p className="text-white/80 mt-2">{guide.readTime}</p>
              </div>
            </div>
          </div>

          <div className="prose prose-green max-w-none">
            <div dangerouslySetInnerHTML={{ __html: guide.content.replace(/\n/g, "<br />") }} />
          </div>

          <Card className="mt-8">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <CheckCircle className="h-5 w-5 text-primary" />
                {guide.assignment.title}
              </CardTitle>
              <CardDescription>
                Test your knowledge with this short quiz. Complete all questions to earn your completion badge.
              </CardDescription>
            </CardHeader>
            <CardContent>
              {!showResults ? (
                <div className="space-y-6">
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>
                        Question {currentQuestion + 1} of {guide.assignment.questions.length}
                      </span>
                      <span>{Math.round(progress)}% complete</span>
                    </div>
                    <Progress value={progress} className="h-2" />
                  </div>

                  <div className="space-y-4">
                    <h3 className="text-lg font-medium">{guide.assignment.questions[currentQuestion].question}</h3>
                    <RadioGroup
                      value={selectedAnswers[currentQuestion]?.toString()}
                      onValueChange={(value) => handleAnswerSelect(currentQuestion, Number.parseInt(value))}
                    >
                      {guide.assignment.questions[currentQuestion].options.map((option, index) => (
                        <div key={index} className="flex items-center space-x-2 p-2 rounded-md hover:bg-muted">
                          <RadioGroupItem value={index.toString()} id={`option-${index}`} />
                          <label
                            htmlFor={`option-${index}`}
                            className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer flex-1"
                          >
                            {option}
                          </label>
                        </div>
                      ))}
                    </RadioGroup>
                  </div>
                </div>
              ) : (
                <div className="space-y-6">
                  <div className="flex flex-col items-center justify-center py-6">
                    <div className="rounded-full bg-primary/10 p-3 mb-4">
                      <CheckCircle className="h-8 w-8 text-primary" />
                    </div>
                    <h3 className="text-xl font-bold">Quiz Completed!</h3>
                    <p className="text-muted-foreground">
                      You scored {calculateScore().score} out of {calculateScore().total} ({calculateScore().percentage}
                      %)
                    </p>
                  </div>

                  <div className="space-y-4">
                    {guide.assignment.questions.map((question, qIndex) => (
                      <div key={qIndex} className="space-y-2">
                        <h4 className="font-medium">{question.question}</h4>
                        {question.options.map((option, oIndex) => (
                          <div
                            key={oIndex}
                            className={`p-2 rounded-md flex items-center ${
                              selectedAnswers[qIndex] === oIndex
                                ? oIndex === question.answer
                                  ? "bg-green-50 border border-green-200"
                                  : "bg-red-50 border border-red-200"
                                : oIndex === question.answer
                                  ? "bg-green-50 border border-green-200"
                                  : ""
                            }`}
                          >
                            <div className="mr-2">
                              {selectedAnswers[qIndex] === oIndex ? (
                                oIndex === question.answer ? (
                                  <CheckCircle className="h-4 w-4 text-green-600" />
                                ) : (
                                  <X className="h-4 w-4 text-red-600" />
                                )
                              ) : oIndex === question.answer ? (
                                <CheckCircle className="h-4 w-4 text-green-600" />
                              ) : (
                                <div className="h-4 w-4" />
                              )}
                            </div>
                            <span className="text-sm">{option}</span>
                          </div>
                        ))}
                      </div>
                    ))}
                  </div>

                  {calculateScore().percentage >= 70 ? (
                    <Alert className="bg-green-50 border-green-200">
                      <CheckCircle className="h-4 w-4 text-green-600" />
                      <AlertTitle>Congratulations!</AlertTitle>
                      <AlertDescription>
                        You've successfully completed this guide. Your knowledge badge has been added to your profile.
                      </AlertDescription>
                    </Alert>
                  ) : (
                    <Alert className="bg-yellow-50 border-yellow-200">
                      <AlertTitle>Almost there!</AlertTitle>
                      <AlertDescription>
                        Review the material and try again to earn your completion badge.
                      </AlertDescription>
                    </Alert>
                  )}
                </div>
              )}
            </CardContent>
            <CardFooter className="flex justify-between">
              {!showResults ? (
                <div className="w-full flex justify-end">
                  <Button onClick={handleNextQuestion} disabled={selectedAnswers[currentQuestion] === undefined}>
                    {currentQuestion < guide.assignment.questions.length - 1 ? "Next Question" : "Submit Answers"}
                  </Button>
                </div>
              ) : (
                <div className="w-full flex justify-between">
                  <Button variant="outline" onClick={() => router.back()}>
                    Back to Resources
                  </Button>
                  {calculateScore().percentage < 70 && (
                    <Button
                      onClick={() => {
                        setCurrentQuestion(0)
                        setSelectedAnswers([])
                        setShowResults(false)
                        setProgress(0)
                      }}
                    >
                      Try Again
                    </Button>
                  )}
                </div>
              )}
            </CardFooter>
          </Card>
        </div>

        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>About This Guide</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex justify-between">
                <span className="text-muted-foreground">Level</span>
                <span className="font-medium capitalize">{guide.level}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-muted-foreground">Reading Time</span>
                <span className="font-medium">{guide.readTime}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-muted-foreground">Assignment</span>
                <span className="font-medium">{guide.assignment.questions.length} questions</span>
              </div>
              <Separator />
              <p className="text-sm text-muted-foreground">{guide.description}</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Related Resources</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {guides
                .filter((g) => g.id !== guide.id)
                .slice(0, 2)
                .map((relatedGuide) => (
                  <div key={relatedGuide.id} className="flex gap-3">
                    <div className="relative h-16 w-16 flex-shrink-0 rounded-md overflow-hidden">
                      <Image
                        src={relatedGuide.image || "/placeholder.svg"}
                        alt={relatedGuide.title}
                        fill
                        className="object-cover"
                        sizes="64px"
                      />
                    </div>
                    <div className="flex flex-col">
                      <Link
                        href={`/resources/guides/${relatedGuide.id}`}
                        className="text-sm font-medium hover:underline"
                      >
                        {relatedGuide.title}
                      </Link>
                      <span className="text-xs text-muted-foreground">{relatedGuide.readTime}</span>
                    </div>
                  </div>
                ))}
            </CardContent>
            <CardFooter>
              <Link href="/resources" className="w-full">
                <Button variant="outline" className="w-full">
                  View All Resources
                </Button>
              </Link>
            </CardFooter>
          </Card>
        </div>
      </div>
    </div>
  )
}
